version: '3.8'

services:
  postgres:
    image: postgres:15
    container_name: todo_postgres_kafka
    environment:
      POSTGRES_DB: todo_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 15s
      timeout: 10s
      retries: 5
    networks:
      - todo-network

  kafka:
    image: bitnami/kafka:3.7
    container_name: todo_kafka
    ports:
      - "9092:9092"
      - "9101:9101"  # JMX port
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_JMX_PORT=9101
    volumes:
      - kafka_data:/bitnami
    networks:
      - todo-network
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    container_name: todo_user_service_kafka
    environment:
      - DEBUG=1
      - DATABASE_URL=postgresql://postgres:postgres123@postgres:5432/todo_db
      - ALLOWED_HOSTS=localhost,127.0.0.1,user-service
      - CORS_ALLOWED_ORIGINS=http://localhost:3000,http://localhost:80,http://frontend
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - todo-network
    command: >
      sh -c "python manage.py migrate &&
             python manage.py runserver 0.0.0.0:8000"
    restart: unless-stopped

  task-service:
    build:
      context: ./task-service
      dockerfile: Dockerfile
    container_name: todo_task_service_kafka
    environment:
      - DATABASE_URL=postgres://postgres:postgres123@postgres:5432/todo_db?sslmode=disable
      - PORT=8001
      - USER_SERVICE_URL=http://user-service:8000
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    ports:
      - "8001:8001"
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      user-service:
        condition: service_started
    networks:
      - todo-network
    restart: unless-stopped

  frontend:
    build:
      context: ./todo-frontend
      dockerfile: Dockerfile
    container_name: todo_frontend_kafka
    ports:
      - "3000:80"
    depends_on:
      - user-service
      - task-service
    networks:
      - todo-network
    restart: unless-stopped

networks:
  todo-network:
    driver: bridge

volumes:
  postgres_data:
  kafka_data: